//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub email: String,
    pub first_name: String,
    pub last_name: String,
    pub password: String,
    pub enable_tips: Option<bool>,
    pub is_verified: bool,
    pub is_deleted: bool,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub account_activation_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::budget::Entity")]
    Budget,
    #[sea_orm(has_many = "super::tip::Entity")]
    Tip,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
}

impl Related<super::budget::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Budget.def()
    }
}

impl Related<super::tip::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tip.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
